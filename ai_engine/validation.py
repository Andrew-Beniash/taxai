"""
Validation module for the AI-powered tax law system.
This module contains functions for validating user inputs and API responses.
"""

import re
from typing import Dict, Any, List, Optional, Tuple

def validate_query(query: str) -> Tuple[bool, Optional[str]]:
    """
    Validate a tax law query for various quality and security issues.
    
    Args:
        query: The user's tax law question or query
        
    Returns:
        Tuple of (is_valid, error_message)
    """
    # Check if query is empty or only whitespace
    if not query or not query.strip():
        return False, "Query cannot be empty"
        
    # Check if query is too short
    if len(query.strip()) < 5:
        return False, "Query is too short. Please provide a more detailed question."
    
    # Check if query is too long (to prevent abuse)
    if len(query) > 1000:
        return False, "Query is too long. Please limit your question to 1000 characters."
    
    # Check for potential security issues (SQL injection, etc.)
    security_patterns = [
        r'<script',
        r'SELECT.*FROM',
        r'DROP TABLE',
        r'DELETE FROM',
        r'INSERT INTO',
        r'EXEC\(',
        r'EXECUTE\('
    ]
    
    for pattern in security_patterns:
        if re.search(pattern, query, re.IGNORECASE):
            return False, "Invalid query content detected."
    
    # Query passed all validation checks
    return True, None


def validate_ai_response(response: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
    """
    Validate AI-generated responses to ensure they meet quality standards.
    
    Args:
        response: The AI-generated response object
        
    Returns:
        Tuple of (is_valid, error_message)
    """
    # Check if response is missing or empty
    if not response or not response.get("response"):
        return False, "No response was generated by the AI model."
    
    # Check if response is too short (indicating potential failure)
    if len(response["response"]) < 20:
        return False, "Generated response is too short to be useful."
    
    # Check for error indicators in the response
    error_indicators = [
        "I apologize, but I cannot provide",
        "I'm sorry, I encountered an error",
        "I don't have information about",
        "Error: "
    ]
    
    for indicator in error_indicators:
        if indicator in response["response"]:
            # This may not be a validation failure, but could indicate the model
            # doesn't have information rather than a technical error
            return True, None
    
    # Validate confidence score (if available)
    if "confidence_score" in response and response["confidence_score"] < 0.3:
        return False, "Low confidence in the generated response."
    
    # Response passed all validation checks
    return True, None
